import { ReactElement, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { ConfigProviderProps } from './types';

/**
 * Creates an object with the same values as object and keys
 * generated by running each own enumerable string keyed property
 * of object thru iteratee.
 */
const mapKeys = (
    obj: object,
    fn: (key: string, value: unknown) => string
): Record<string, unknown> => {
    const result: Record<string, unknown> = {};
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            const value = (obj as Record<string, unknown>)[key];
            const newKey = fn(key, value);
            result[newKey] = value;
        }
    }

    return result;
};

/**
 * Replace specific key with prefix `next`
 * and lowercase first character of the result.
 */
const replaceKey = (key: string) =>
    key.replace(/^(next)([A-Z])/, (match, p1, p2) => p2.toLowerCase());

const transformContext = (source: Record<PropertyKey, string>) => mapKeys(source, replaceKey);

export type ConsumerState = Pick<
    ConfigProviderProps,
    'prefix' | 'pure' | 'rtl' | 'warning' | 'device' | 'popupContainer' | 'locale'
>;

export interface ConsumerProps {
    children?: ((state: ConsumerState) => ReactElement) | ReactNode;
}

/**
 * Consumer
 */
const Consumer = ({ children }: ConsumerProps, context: Record<PropertyKey, string>) =>
    typeof children === 'function' ? children(transformContext(context)) : null;

/**
 * PropTypes
 */
Consumer.propTypes = {
    // Render context as function
    // Function(context: object): ReactElement
    children: PropTypes.func,
};

/**
 * ContextTypes (legacy context)
 */
Consumer.contextTypes = {
    nextPrefix: PropTypes.string,
    nextLocale: PropTypes.object,
    nextPure: PropTypes.bool,
    newRtl: PropTypes.bool,
    nextWarning: PropTypes.bool,
    nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),
    nextPopupContainer: PropTypes.any,
};

export default Consumer;
